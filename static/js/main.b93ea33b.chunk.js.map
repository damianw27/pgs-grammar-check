{"version":3,"sources":["hooks/parser/types/parser-action-type.ts","components/code-editor/consts/pgs-language.ts","components/code-editor/code-editor.tsx","hooks/parser/parser-reducer.ts","hooks/parser/types/parser-state.ts","hooks/parser/parser-action.ts","components/errors-list-item/errors-list-item.tsx","components/icons/check-icon/check-icon.tsx","components/icons/exclamation-icon/exclamation-icon.tsx","components/errors-list/errors-list.tsx","app.tsx","hooks/parser/parser.ts","index.tsx"],"names":["ParserActionType","pgsLanguage","keyword","pattern","lookbehind","greedy","property","string","number","punctuation","boolean","null","alias","CodeEditor","props","assemblyLine","line","index","value","onValueChange","changedQuery","highlight","code","input","split","map","join","padding","textareaId","className","parserReducer","state","action","type","ADD_ERROR","errors","payload","CLEAR_ERRORS","defaultParserState","AddParserErrorAction","ClearParserErrorsAction","ErrorsListItem","error","linePosition","charPosition","message","errorIndex","CheckIcon","xmlns","width","height","fill","viewBox","d","ExclamationIcon","ErrorsList","length","App","useState","query","setQuery","parser","useReducer","dispatch","parse","useCallback","inputStream","CharStreams","fromString","lexer","PgsLexer","tokenStream","CommonTokenStream","PgsParser","addErrorListener","syntaxError","recognizer","offendingSymbol","charPositionInLine","msg","pgs","useParser","useEffect","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.b93ea33b.chunk.js","sourcesContent":["export enum ParserActionType {\n  ADD_ERROR = '[parser] add parser error',\n  CLEAR_ERRORS = '[parser] clear parser errors',\n}\n","export const pgsLanguage = {\n  keyword: {\n    pattern: /\\b(?:CREATE|NODE|EDGE|OPEN|OPTIONAL|TYPE|STRICT)\\b/,\n    lookbehind: true,\n    greedy: true,\n  },\n  'data-type': {\n    pattern:\n      /\\b(?:STRING|BIT|TINYINT|INT|INT32|BOOL|FLOAT|DOUBLE|DECIMAL|DATETIME|TIME|YEAR)\\b/,\n    lookbehind: true,\n    greedy: true,\n  },\n  property: {\n    pattern: /:[A-Za-z]+/,\n    lookbehind: true,\n    greedy: true,\n  },\n  string: {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true,\n  },\n  number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  punctuation: /[{}[\\],():]/,\n  boolean: /\\b(?:FALSE|TRUE)\\b/,\n  null: {\n    pattern: /\\bNULL\\b/,\n    alias: 'keyword',\n  },\n};\n","import React, { ReactElement } from 'react';\nimport { CodeEditorProps } from './types/code-editor-props';\nimport { highlight, languages } from 'prismjs';\nimport Editor from 'react-simple-code-editor';\n\nimport './code-editor.css';\nimport 'prismjs/themes/prism.css';\nimport { pgsLanguage } from './consts/pgs-language';\n\nconst NEW_LINE_SIGN = '\\n';\n\nexport const CodeEditor = (props: CodeEditorProps): ReactElement => {\n  const assemblyLine = (line: string, index: number): string =>\n    `<span class=\"editor-line-number\">${index + 1}</span>${line}`;\n\n  const highlightWithLineNumbers = (input: string): string =>\n    highlight(input, pgsLanguage, 'pgs')\n      .split(NEW_LINE_SIGN)\n      .map(assemblyLine)\n      .join(NEW_LINE_SIGN);\n\n  return (\n    <Editor\n      value={props.value}\n      onValueChange={(changedQuery) => props.onValueChange(changedQuery)}\n      highlight={(code) => highlightWithLineNumbers(code)}\n      padding={0}\n      textareaId=\"code-area\"\n      className=\"editor\"\n    />\n  );\n};\n","import { ParserState } from './types/parser-state';\nimport { ParserActions } from './parser-action';\nimport { ParserActionType } from './types/parser-action-type';\n\nexport function parserReducer(\n  state: ParserState,\n  action: ParserActions\n): ParserState {\n  switch (action.type) {\n    case ParserActionType.ADD_ERROR:\n      return {\n        ...state,\n        errors: [...state.errors, action.payload],\n      };\n    case ParserActionType.CLEAR_ERRORS:\n      return {\n        ...state,\n        errors: [],\n      };\n    default:\n      return state;\n  }\n}\n","import { ParserError } from './parser-error';\n\nexport interface ParserState {\n  readonly errors: ParserError[];\n}\n\nexport const defaultParserState: ParserState = {\n  errors: [],\n};\n","import { ParserActionType } from './types/parser-action-type';\nimport { ParserError } from './types/parser-error';\n\nexport interface ParserAction {\n  readonly type: ParserActionType;\n}\n\nexport class AddParserErrorAction implements ParserAction {\n  public readonly type = ParserActionType.ADD_ERROR;\n\n  public constructor(public payload: ParserError) {}\n}\n\nexport class ClearParserErrorsAction implements ParserAction {\n  public readonly type = ParserActionType.CLEAR_ERRORS;\n}\n\nexport type ParserActions = AddParserErrorAction | ClearParserErrorsAction;\n","import { ErrorsListItemProps } from './types/errors-list-item-props';\nimport React, { ReactElement } from 'react';\nimport { ParserError } from '../../hooks/parser/types/parser-error';\n\nimport './errors-list-item.css';\n\nexport const ErrorsListItem = (props: ErrorsListItemProps): ReactElement => {\n  const parserErrorToString = (error: ParserError): string =>\n    `[line ${error.linePosition}:${error.charPosition}] ${error.message}`;\n\n  return (\n    <li key={`code-error-${props.errorIndex}`} className=\"errors-list-element\">\n      {parserErrorToString(props.error)}\n    </li>\n  );\n};\n","import React, { ReactElement } from 'react';\n\nexport const CheckIcon = (): ReactElement => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    className=\"bi bi-check-circle-fill\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z\" />\n  </svg>\n);\n","import React, { ReactElement } from 'react';\n\nexport const ExclamationIcon = (): ReactElement => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    fill=\"currentColor\"\n    viewBox=\"0 0 16 16\"\n  >\n    <path d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z\" />\n  </svg>\n);\n","import { ErrorsListProps } from './types/errors-list-props';\nimport React, { ReactElement } from 'react';\nimport { ErrorsListItem } from '../errors-list-item/errors-list-item';\nimport { CheckIcon } from '../icons/check-icon/check-icon';\nimport { ExclamationIcon } from '../icons/exclamation-icon/exclamation-icon';\n\nimport './errors-list.css';\n\nexport const ErrorsList = (props: ErrorsListProps): ReactElement => {\n  if (props.errors.length === 0) {\n    return (\n      <span className=\"no-errors\">\n        <CheckIcon />\n        <span className=\"no-errors-str\">No errors!</span>\n      </span>\n    );\n  }\n\n  return (\n    <div className=\"errors-wrapper\">\n      <span className=\"found-errors\">\n        <ExclamationIcon />\n        <span className=\"found-errors-str\">\n          {`Found '${props.errors.length}' parser errors`}\n        </span>\n      </span>\n      <ul className=\"errors-list\">\n        {props.errors.map((error, index) => (\n          <ErrorsListItem\n            key={`code-error-${index}`}\n            errorIndex={index}\n            error={error}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { CodeEditor } from './components/code-editor/code-editor';\nimport { useParser } from './hooks/parser/parser';\nimport { ErrorsList } from './components/errors-list/errors-list';\n\nconst defaultQuery = `\nCREATE GRAPH TYPE FraudGraphType {\n  (PersonType: Person {name STRING}),\n  (CustomerType: PersonType  {c_id INT32}),\n  (CreditCardType: CreditCard {cc_num STRING}),\n  (TransactionType: Transaction {cc_num STRING}),\n  (AccountType: Account {acct_id INT32}),\n  (:CustomerType)-[OwnsAccountType: owns]->(:AccountType),\n  (:CustomerType)-[UsesCreditCardType: uses]->(:CreditCardType),\n  (:TransactionType)-[ActivityType: Withdraw {time DATETIME}]->(:AccountType)\n}\n`;\n\nexport function App() {\n  const [query, setQuery] = useState<string>(defaultQuery);\n\n  const parser = useParser();\n\n  useEffect(() => {\n    parser.parse(query);\n  }, [query]);\n\n  return (\n    <div className=\"App\">\n      <CodeEditor\n        value={query}\n        onValueChange={(changedQuery) => setQuery(changedQuery)}\n      />\n\n      <ErrorsList errors={parser.errors} />\n    </div>\n  );\n}\n","import { ParserResult } from './types/parser-result';\nimport { useCallback, useReducer } from 'react';\nimport { parserReducer } from './parser-reducer';\nimport { defaultParserState } from './types/parser-state';\nimport { CharStreams, CommonTokenStream } from 'antlr4ts';\nimport { PgsLexer } from '@pgs/grammar/dist/lexer/pgs-lexer';\nimport { PgsParser } from '@pgs/grammar/dist/parser/pgs-parser';\nimport { AddParserErrorAction, ClearParserErrorsAction } from './parser-action';\nimport { ParserError } from './types/parser-error';\n\nexport const useParser = (): ParserResult => {\n  const [state, dispatch] = useReducer(parserReducer, defaultParserState);\n\n  const parse = useCallback((value: string) => {\n    dispatch(new ClearParserErrorsAction());\n\n    if (value === '') {\n      return;\n    }\n\n    let inputStream = CharStreams.fromString(value);\n    let lexer = new PgsLexer(inputStream);\n    let tokenStream = new CommonTokenStream(lexer);\n    let parser = new PgsParser(tokenStream);\n\n    parser.addErrorListener({\n      syntaxError: (\n        recognizer,\n        offendingSymbol,\n        line,\n        charPositionInLine,\n        msg\n        // eslint-disable-next-line max-params\n      ): void => {\n        const errorString = `[line ${line}:${charPositionInLine}] ${msg}`;\n        const parserError: ParserError = {\n          linePosition: line,\n          charPosition: charPositionInLine,\n          message: msg,\n        };\n\n        dispatch(new AddParserErrorAction(parserError));\n      },\n    });\n\n    parser.pgs();\n  }, []);\n\n  return { parse, errors: state.errors };\n};\n","import React, { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { App } from './app';\n\nimport './styles.css';\n\nconst rootElement = document.getElementById('root');\n\nif (rootElement !== null) {\n  const root = createRoot(rootElement);\n\n  root.render(\n    <StrictMode>\n      <App />\n    </StrictMode>\n  );\n}\n"],"sourceRoot":""}